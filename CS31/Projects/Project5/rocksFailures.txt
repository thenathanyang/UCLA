for (int x = 0; probeWord[x] != '\0'; x++)		// CORRECT?!?!?! Does it break out of whole while loop or just the for loop?
{
	if (!islower(probeWord[x]))			// NEED TO FIX!!!!!!!
	{
		cout << "Your probe word must be a word of 4 to 6 lower case letters." << endl;
		continue;		// Want to break out of while loop
	}
}

for (int y = 0; words[y]; y++)	// CORRECT?!?!?!		// NEED TO FIX!!!!!!!!!!
{
	if (secretWord == words[y])
		break;
	cout << "I don't know that word." << endl;
}



		/*
		for (int k = 0; probeWord[k] != '\0'; k++)
		{
			if (probeWord[k] == secretWord[k])
				rock++;	
		}
		*/

		// char leftoverProbes[200];
		// char leftoverSecrets[200];
		// char shorterWord[200];
		// char longerWord[200];
		// int length=0;


		// if (strlen(probeWord)>=strlen(secretWord))
		// {
		// 	strcpy(shorterWord, secretWord);
		// 	strcpy(longerWord, probeWord);
		// }

		// if (strlen(probeWord)<strlen(secretWord))
		// {
		// 	strcpy(shorterWord, probeWord);
		// 	strcpy(longerWord, secretWord);
		// }

		// for (int k = 0; shorterWord[k] != '\0'; k++)
		// {
		// 	if (probeWord[k] == secretWord[k])
		// 	{
		// 		rocks++;
		// 	}
		// 	if (probeWord[k] != secretWord[k])			// HOW TO APPEND LAST LETTER IN LONGER ARRAY TO LEFTOVERS?
		// 	{
		// 		strcat(leftoverProbes, probeWord[k]);
		// 		strcat(leftoverSecrets, secretWord[k]);
		// 	}
		// 	length++;
		// }

		// for (int j=length; longerWord[j] != '\0'; j++)
		// {
		// 	if (strlen(probeWord)>=strlen(secretWord))
		// 	{
		// 		strcat(leftoverProbes, probeWord[j]);
		// 	}
		// 	if (strlen(probeWord)<strlen(secretWord))
		// 	{
		// 		strcat(leftoverSecrets, secretWord[j]);
		// 	}
		// }




		// char longerLeftoverArray[200];
		// char shorterLeftoverArray[200];


		// if (strlen(leftoverProbes)>=strlen(leftoverSecrets))
		// {
		// 	strcpy(shorterLeftoverArray, leftoverSecrets);
		// 	strcpy(longerLeftoverArray, leftoverProbes);
		// }

		// if (strlen(leftoverProbes)<strlen(leftoverSecrets))
		// {
		// 	strcpy(shorterLeftoverArray, leftoverProbes);
		// 	strcpy(longerLeftoverArray, leftoverSecrets);
		// }





		// for (int i = 0; longerLeftoverArray[i] != '\0'; i++)
		// {
		// 	for (int b = 0; shorterLeftoverArray[b] != '\0'; b++)
		// 	{
		// 		if (leftoverProbes[i] == leftoverSecrets[b])
		// 		{
		// 			pebbles++;
		// 			break;
		// 		}
		// 	}
		// }




		// FOR TESTING!!!!!!!!!

		// for (int i = 0; i < secretLen; i++) {
		// 	if (secretWord[i] == 0) {
		// 		cout << "0";
		// 	} else{
		// 		cout << secretWord[i];
		// 	}

		// 	// cout << ((secretWord[i] != '\0') ? secretWord[i] : "0") << endl;
		// }
		// cout<<endl;

		// for (int i = 0; i < probeLen; i++) {
		// 	if (probeWord[i] == 0) {
		// 		cout << "0";
		// 	} else{
		// 		cout << probeWord[i];
		// 	}

		// 	// cout << ((secretWord[i] != '\0') ? secretWord[i] : "0") << endl;
		// }
		// cout<<endl;







				// for (int k = 0; k < probeLen; k++)		// CORRECT?!?!?!		// NEED TO FIX!!!
		// {
		// 	for (int i = 0; i < secretLen; i++) // detest   datest
		// 	{
		// 		cout << "try " << k <<", "<<i << " " << probeWord[k] <<", "<<secretWord[i] <<endl;
 	// 			if (probeWord[k] == secretWord[i])
		// 		{
					
		// 			if (k == i) {
		// 				cout << k << " " << i << " " << probeWord[k] << endl;
		// 				rocks++;
		// 			}
		// 			//else
		// 			//	pebbles++;
		// 			secretWord[i] = '\0';
		// 			break;
		// 		}
		// 	}
		// }